import React from 'react'
import WebpackDevServer from 'webpack-dev-server'
import { ComponentDoc, PropDescriptor } from 'vue-docgen-api'
import { TransformOptions } from 'buble'
import { Styles, StyleSheet } from 'jss';
import { Configuration, loader } from 'webpack'
import { ProcessedSection, Section } from './Section'
import { EXPAND_MODE } from './enums'
import { Example, ExampleLoader } from './Example'
import { ComponentProps } from './Component'

export interface StyleguidistContext extends loader.LoaderContext {
_styleguidist: StyleguidistConfig
}

export interface StyleguidistConfig {<% 
    Object.keys(schema).forEach(key => {
        const opt = schema[key]
        const description = opt.description || opt.message
        const defaultShowable = ['boolean', 'number', 'string'].indexOf(typeof opt.default) > -1
if(description || defaultShowable || opt.deprecated){%>
/**<% 
    if(description) { %>
* <%- description %> <%
    }

    if(opt.deprecated) { %>
* @deprecated <%- opt.deprecated %> <%
    }

    if(defaultShowable) { %>
* @default <%- JSON.stringify(opt.default) %> <%
    }
    %>
*/<%
}
    %>
<%-key %>: <%- schema[key].tstype || (['number', 'boolean', 'string'].indexOf(schema[key].type) > -1 ? 
        schema[key].type : schema[key].uitype) || 'any' %>;<%
    });
%>
}

export interface StyleGuideObject {
sections: ProcessedSection[]
config: StyleguidistConfig
renderRootJsx: React.ReactNode
welcomeScreen: any
patterns: string[]
}